
package techquizapp.gui;

import java.awt.Color;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JOptionPane;

import techquizapp.dao.PerformanceDAO;
import techquizapp.dao.QuestionDAO;
import techquizapp.pojo.Answer;
import techquizapp.pojo.AnswerStore;
import techquizapp.pojo.Exam;
import techquizapp.pojo.Performance;
import techquizapp.pojo.Question;
import techquizapp.pojo.QuestionStore;
import techquizapp.pojo.UserProfile;

public class TakeTestFrame extends javax.swing.JFrame {

    private Timer timer;
    private TimerTask task;
    private int i = 0;
    private int qno, pos = 0;
    private QuestionStore qStore;
    private AnswerStore aStore;
    private Exam exam;
    Color oldColour;
    
    
    public TakeTestFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
        lblUsername.setText("Hello " + UserProfile.getUserName());
        oldColour = lblLogout.getForeground();
        qStore = new QuestionStore();
        aStore = new AnswerStore();
        qno=1;
        lblQno.setText(lblQno.getText() + " " + qno);
    }
    public TakeTestFrame(Exam exam) {
        this();
        this.exam = exam;
        lblTitle.setText(exam.getLanguage().toUpperCase() + " PAPER");
        loadQuestions();
        showQuestion();
        i = exam.getTotalQuestions() * 60;
        timer = new Timer();
        task = new TimerTask(){
	public void run(){
            if(i>=1){
		String time = getTime(i);
                txtTimer.setText(time);
		//System.out.println(time);
		i--;
            }
                else{
                timer.cancel();
                closeTest();
                return;
            }
            }
        };
        runTimer();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        lblUsername = new javax.swing.JLabel();
        lblLogout = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        lblQno = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtQuestion = new javax.swing.JTextArea();
        btnDone = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        jrbOption1 = new javax.swing.JRadioButton();
        jrbOption3 = new javax.swing.JRadioButton();
        jrbOption2 = new javax.swing.JRadioButton();
        jrbOption4 = new javax.swing.JRadioButton();
        btnPrevious = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtTimer = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("TECH QUIZ APP");

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        lblUsername.setBackground(new java.awt.Color(0, 0, 0));
        lblUsername.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblUsername.setForeground(new java.awt.Color(255, 204, 153));
        lblUsername.setText("Hello");

        lblLogout.setBackground(new java.awt.Color(0, 0, 0));
        lblLogout.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblLogout.setForeground(new java.awt.Color(255, 204, 153));
        lblLogout.setText("Logout");
        lblLogout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblLogoutMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblLogoutMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblLogoutMouseExited(evt);
            }
        });

        lblTitle.setBackground(new java.awt.Color(0, 0, 0));
        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(255, 204, 153));
        lblTitle.setText("PAPER");

        lblQno.setBackground(new java.awt.Color(0, 0, 0));
        lblQno.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblQno.setForeground(new java.awt.Color(255, 204, 153));
        lblQno.setText("Question ");

        txtQuestion.setColumns(20);
        txtQuestion.setRows(5);
        jScrollPane1.setViewportView(txtQuestion);

        btnDone.setBackground(new java.awt.Color(255, 204, 153));
        btnDone.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnDone.setText("Done");
        btnDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoneActionPerformed(evt);
            }
        });

        btnNext.setBackground(new java.awt.Color(255, 204, 153));
        btnNext.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnNext.setText("Next");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        jrbOption1.setBackground(new java.awt.Color(0, 0, 0));
        buttonGroup1.add(jrbOption1);
        jrbOption1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jrbOption1.setForeground(new java.awt.Color(255, 204, 153));
        jrbOption1.setText("jRadioButton1");

        jrbOption3.setBackground(new java.awt.Color(0, 0, 0));
        buttonGroup1.add(jrbOption3);
        jrbOption3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jrbOption3.setForeground(new java.awt.Color(255, 204, 153));
        jrbOption3.setText("jRadioButton3");

        jrbOption2.setBackground(new java.awt.Color(0, 0, 0));
        buttonGroup1.add(jrbOption2);
        jrbOption2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jrbOption2.setForeground(new java.awt.Color(255, 204, 153));
        jrbOption2.setText("jRadioButton2");

        jrbOption4.setBackground(new java.awt.Color(0, 0, 0));
        buttonGroup1.add(jrbOption4);
        jrbOption4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jrbOption4.setForeground(new java.awt.Color(255, 204, 153));
        jrbOption4.setText("jRadioButton4");

        btnPrevious.setBackground(new java.awt.Color(255, 204, 153));
        btnPrevious.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnPrevious.setText("Previous");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Time Left:");

        txtTimer.setBackground(new java.awt.Color(0, 0, 0));
        txtTimer.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        txtTimer.setForeground(new java.awt.Color(255, 255, 255));
        txtTimer.setText("00:00:00");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblQno)
                        .addGap(55, 55, 55)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jrbOption4)
                            .addComponent(jrbOption3)
                            .addComponent(jrbOption2)
                            .addComponent(jrbOption1))
                        .addGap(204, 204, 204)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDone, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPrevious, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(57, 57, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(lblLogout)
                        .addGap(22, 22, 22))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTimer, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(lblTitle)
                        .addGap(239, 239, 239))))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(lblUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(506, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblLogout)
                .addGap(42, 42, 42)
                .addComponent(lblTitle)
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtTimer))
                .addGap(47, 47, 47)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblQno)
                        .addGap(15, 15, 15))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jrbOption1)
                            .addComponent(btnNext))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jrbOption2)
                            .addComponent(btnPrevious))
                        .addGap(18, 18, 18)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jrbOption3)
                    .addComponent(btnDone))
                .addGap(18, 18, 18)
                .addComponent(jrbOption4)
                .addGap(71, 71, 71))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(lblUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(514, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lblLogoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLogoutMouseClicked
        LoginFrame loginFrame = new LoginFrame();
        loginFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_lblLogoutMouseClicked

    private void lblLogoutMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLogoutMouseEntered
        lblLogout.setForeground(Color.WHITE);
    }//GEN-LAST:event_lblLogoutMouseEntered

    private void lblLogoutMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLogoutMouseExited
        lblLogout.setForeground(oldColour);
    }//GEN-LAST:event_lblLogoutMouseExited

    private void btnDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoneActionPerformed

        String chosenAnswer = getUserAnswer();
        if(chosenAnswer!=null){
            Question question = qStore.getQuestionByQno(qno);
            String correctAnswer = question.getCorrectAnswer();
            Answer answer = new Answer(exam.getExamId(),exam.getLanguage(),qno,chosenAnswer,correctAnswer);
            Answer attempted = aStore.getAnswerByQno(qno);
            if(attempted==null){
                aStore.addAnswer(answer);
            }
            else{
                String prevAnswer = attempted.getChosenAnswer();
                if(prevAnswer.equals(chosenAnswer)==false){
                    int apos = aStore.removeAnswer(attempted);
                    aStore.setAnswerAt(apos, answer);
                }
            }
        }
        int right=0,wrong=0;
        for(Question question: qStore.getAllQuestions()){
            int qno = question.getQno();
            Answer ans = aStore.getAnswerByQno(qno);
            if(ans==null)
                continue;
            String attemptedAnswer = ans.getChosenAnswer();
            String correctAnswer = ans.getCorrectAnswer();
            if(attemptedAnswer.equals(correctAnswer))
                ++right;
            else
                ++wrong;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("\nRight Answers: " + right);
        sb.append("\nWrong Answers: " +wrong);
        sb.append("\nUnattempted: "+ (qStore.getCount()-(right+wrong)));
        JOptionPane.showMessageDialog(null, sb.toString(),"Result!!",JOptionPane.INFORMATION_MESSAGE);
        try{
            Performance p = new Performance(exam.getExamId(),exam.getLanguage(),UserProfile.getUserName(),right,wrong,qStore.getCount()-(right+wrong),((double)right/qStore.getCount())*100);
            PerformanceDAO.addPerformance(p);
            JOptionPane.showMessageDialog(null,"Result Saved\n Thanku for taking test","Done!!",JOptionPane.INFORMATION_MESSAGE);
            ChoosePaperFrame choosePaperFrame = new ChoosePaperFrame();
            choosePaperFrame.setVisible(true);
            this.dispose();
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(null,"DB error","TakeTestFrame Error!!",JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnDoneActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        String chosenAnswer = getUserAnswer();
        if(chosenAnswer!=null){
            Question question = qStore.getQuestionByQno(qno);
            String correctAnswer = question.getCorrectAnswer();
            Answer answer = new Answer(exam.getExamId(),exam.getLanguage(),qno,chosenAnswer,correctAnswer);
            Answer attempted = aStore.getAnswerByQno(qno);
            if(attempted==null){
                aStore.addAnswer(answer);
            }
            else{
                String prevAnswer = attempted.getChosenAnswer();
                if(prevAnswer.equals(chosenAnswer)==false){
                    int apos = aStore.removeAnswer(attempted);
                    aStore.setAnswerAt(apos, answer);
                }
            }
        }
        pos++;
        if(pos>=qStore.getCount()){
            pos=0;
        }
        qno++;
        if(qno > qStore.getCount()){
            qno=1;
        }
        lblQno.setText("Question " + qno);
        showQuestion();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        String chosenAnswer = getUserAnswer();
        if(chosenAnswer!=null){
            Question question = qStore.getQuestionByQno(qno);
            String correctAnswer = question.getCorrectAnswer();
            Answer answer = new Answer(exam.getExamId(),exam.getLanguage(),qno,chosenAnswer,correctAnswer);
            Answer attempted = aStore.getAnswerByQno(qno);
            if(attempted==null){
                aStore.addAnswer(answer);
            }
            else{
                String prevAnswer = attempted.getChosenAnswer();
                if(prevAnswer.equals(chosenAnswer)==false){
                    int apos = aStore.removeAnswer(attempted);
                    aStore.setAnswerAt(apos, answer);
                }
            }
        }
        pos--;
        if(pos<0){
            pos=qStore.getCount()-1;
        }
        qno--;
        if(qno <= 0 ){
            qno=qStore.getCount();
        }
        lblQno.setText("Question " + qno);
        showQuestion();
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void loadQuestions(){
        try{
            ArrayList<Question> quesList = QuestionDAO.getQuestionsByExamId(exam.getExamId());
            for(Question q: quesList)
                qStore.addQuestion(q); 
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "DB Error","TakeTestFrame Error!!",JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    private void showQuestion(){
        Question q = qStore.getQuestion(pos);
        buttonGroup1.clearSelection();
        txtQuestion.setText(q.getQuestion());
        jrbOption1.setText(q.getAnswer1());
        jrbOption2.setText(q.getAnswer2());
        jrbOption3.setText(q.getAnswer3());
        jrbOption4.setText(q.getAnswer4());
        Answer ans = aStore.getAnswerByQno(qno);
        if(ans == null)
            return;
        String str=ans.getChosenAnswer();
        switch(str){
            case "Answer1":
                jrbOption1.setSelected(true);
                break;
            case "Answer2":
                jrbOption2.setSelected(true);
                break;
            case "Answer3":
                jrbOption3.setSelected(true);
                break;
            case "Answer4":
                jrbOption4.setSelected(true);
                break;
        }
    }
    private String getUserAnswer(){
        if(jrbOption1.isSelected())
            return "Answer1";
        else if(jrbOption2.isSelected())
            return "Answer2";
        else if(jrbOption3.isSelected())
            return "Answer3";
        else if(jrbOption4.isSelected())
            return "Answer4";
        else
            return null;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TakeTestFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TakeTestFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TakeTestFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TakeTestFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TakeTestFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDone;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton jrbOption1;
    private javax.swing.JRadioButton jrbOption2;
    private javax.swing.JRadioButton jrbOption3;
    private javax.swing.JRadioButton jrbOption4;
    private javax.swing.JLabel lblLogout;
    private javax.swing.JLabel lblQno;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JTextArea txtQuestion;
    private javax.swing.JLabel txtTimer;
    // End of variables declaration//GEN-END:variables

    private void runTimer() {
        timer.schedule(task, 0, 1000 );
    }
    private void closeTest(){
        JOptionPane.showMessageDialog(null,"Time Over\nClick on DONE button\n Else test will not save.","Over!!",JOptionPane.INFORMATION_MESSAGE);
        disableAll();
    }
    private static String getTime(int sec){
        int hours = 0;
        int remainderOfHours = 0;
        int minutes = 0;
        int seconds = 0;
        if (sec >= 3600) {
            hours = sec / 3600;               
            remainderOfHours = sec % 3600;        // could be more or less than a min
            if (remainderOfHours >= 60)   //check if remainder is more or equal to a min
            {
                minutes = remainderOfHours / 60;
                seconds = remainderOfHours % 60;
            }
            else
            {                       // if it's less than a min
                seconds = remainderOfHours;
            }
        }
        // if we have a min or more
        else if (sec >= 60)                
        {
            hours = 0;               //62
            minutes = sec / 60;
            seconds = sec % 60;
        }
        //if we have just seconds
        else if (sec < 60)
        {
            hours = 0;
            minutes = 0;
            seconds = sec;
        }
        //i get integer hour minuite second. i want to transform them to strings:
    
        String strHours;
        String strMins; 
        String strSecs; 

        if(seconds < 10)
            strSecs = "0" + Integer.toString(seconds);
        else
            strSecs = Integer.toString(seconds);
   
        if(minutes < 10)
            strMins = "0" + Integer.toString(minutes);
        else
            strMins = Integer.toString(minutes);
    
        if(hours < 10)
            strHours = "0" + Integer.toString(hours);
        else
            strHours = Integer.toString(hours);
    	
        
        String time = strHours + ":" + strMins + ":" + strSecs;
        return time;
    }

    private void disableAll() {
        txtQuestion.setEnabled(false);
        jrbOption1.setEnabled(false);
        jrbOption2.setEnabled(false);
        jrbOption3.setEnabled(false);
        jrbOption4.setEnabled(false);
        lblLogout.setEnabled(false);
        txtTimer.setEnabled(false);
        btnNext.setEnabled(false);
        btnPrevious.setEnabled(false);
    }

}
